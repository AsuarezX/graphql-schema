"""
Configuration for AVERAGE_TIME. 
Average time is used to verify requests times.
There are 3 options:
- OPTION 1: Can verify average time traffic of a time frame and compare it with an other time frame. (window and historical window) Must set field window and historical windows higher than 0.
- OPTION 2: Can verify average time traffic of a time frame and compare it with the value max_average. Must set window higher than 0.
- OPTION 3: Can verify average time traffic of a specific number of requests and compare it with the value max_average. Must set window as 0 and minNumRequests higher than 0.
"""
input AlertUpdateConfigurationInputAverageTime { 
  # Minutes
  "The timeframe in minutes"
  historicalWindow: Int
  # Minutes
  "Time frame in minutes to set the beginning of historicalWindow"
  offset: Int
  "maximum average time allowed in miliseconds"
  max_average: Int
  # Minutes
  "Frequency of time in minutes in which the alert will be reviewed"
  periodicity: Int
 	# Minutes
  "The time frame in minutes"
  window: Int
  "The number of times the alert must be triggered in order to notify"
  timesToAlert: Int
  # true:	advise only if state change to KO. 
  #false: advise if an alert change to OK state.
  "To allow recoveries notifications"
  noRecoveries: Boolean
  # true: alert advice sent only if state has changed.  
  #	false: alert advice always sent.
  "To allow notifications only if the status change"
  stateChangesOnly: Boolean
  # minimum number of requests to be alert
  """
  OPTION 1: defines the minimum number of requests must be in our historical Data before cheking the alert. 
  OPTION 2: defines the minimum number of requests must be in the window time frame to check the alert.
  """
  minNumberRequests: Int
 	# percentage (%)
 """
 Defines the minimum percentage to consider alert in status ALERTING.
 OPTION 1: Average time difference between window and historical window will be used to calculate the percentage and compared with the minimum percentage set.
 OPTION 2: Average time difference between window and max_average value field will be used to calculate the percetage and compared with the minimum percentage set.
 OPTION 3: Average time difference between Requests and max_average value field will be used to calculate the percetage and compared with the minimum percentage set.
 """
  percentageToAlert: Int
  #email: Email!
  "Email addresses to send notifications"
  email: [EmailInput]
  # status returned by our Hub
  "Possibility to filter traffic by hubStatus"
  hubStatus: [HubStatusInput!]
	# error codes
  "Possibility to filter traffic by errorCodes"
  errorCode: [ErrorCodeInput!]
  # error types
  "Possibility to filter traffic by errorTypes"
  errorType: [ErrorTypeInput!] 
  # supplier codes
  "Possibility to filter traffic by suppliers (hub provider)"
	supplier:[AlertObjectInput!]
  # supplier codes
  "Possibility to filter traffic by clients (hub user)"
	client:[AlertObjectInput!]
  # supplier codes
  "Possibility to filter traffic by groups. It is mandatory to set an ORG group type. Only ORG, FOLDER and PRODUCT group types are allowed"
	group:[AlertGroupInput!]
  # supplier codes
  "Possibility to filter traffic by accesses"
	access:[AlertObjectInput!]
  # supplier codes
  "Possibility to filter traffic by operations"
	operation:[AlertObjectInput!]
  # possibility of grouping. 
  # For example: can group by Supplier, errorType or both
  "Possibility to group by traffic and calculate its parameters separately "
	groupBy:[AlertGroups!]
}
