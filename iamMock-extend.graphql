enum GroupType{
  ROOT
  ORG
  GROUP
  PROFILE
  TEAM
}

enum MemberType {
  USER
  SERVICE_ACCOUNT
}

enum SearchType{
  MEMBER
}

schema{
    query: Query
    mutation: Mutation
}

union SearchResultItemConnection = GroupConnection

union test1 = Member | Group

extend type Query{

  #search(first: Int, after: String, last: Int, before: String, codes: [String!], type: SearchType!): SearchResultItemConnection!

  getMembers(codes:[String!],first: Int, Last: Int, before: String, after:String) : MemberConnection!
  getGroups(codes:[String!],first: Int, Last: Int, before: String, after:String) : GroupConnection!
  getApis(codes:[String!],first: Int, Last: Int, before: String, after:String) : APIConnection!
  getResources(codes:[String!],first: Int, Last: Int, before: String, after:String) : ResourceConnection!
  getRoles(codes:[String!],first: Int, Last: Int, before: String, after:String) : RoleConnection!

}

type Member implements Node{
  code: ID!
  memberData: MemberData
  error:   [Error!]
  isActive: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MemberData {
  id: ID!
  code: ID!
  roles: String
  memberType: String
  groups(first: Int, Last: Int, before: String, after:String, codes: [String!]): GroupConnection
  #roles: RoleConnection TODO
  #access: AccessConnection TODO
}

type MemberConnection{
  edges: [MemberEdge]
  pageInfo: PageInfo!
}

type MemberEdge {
  cursor: String!
  node: Member
}


type Group implements Node{
  code: ID!
  error: [Error!]
  groupData: GroupData
  createdAt: DateTime!
  updatedAt: DateTime!
}

interface GroupData{
  id: ID!
  code: ID!
  type: GroupType!
  parent: Int!
  members(first: Int, Last: Int, before: String, after:String, codes: [String!]): MemberConnection
  apis(first: Int, Last: Int, before: String, after:String, codes: [String!]): APIConnection
}

type GroupConnection{
  edges: [GroupEdge]
  pageInfo: PageInfo!
}

type GroupEdge {
  cursor: String!
  node: Group
}

type APIConnection{
  edges: [APIEdge]
  pageInfo: PageInfo!
}

type APIEdge {
  cursor: String!
  node: API
}

type API implements Node{
  code: ID!
  error: [Error!]
  apiData: APIData
    createdAt: DateTime!
  updatedAt: DateTime!
}

type APIData{
  id: ID!
  code: ID!
  groups(first: Int, Last: Int, before: String, after:String, codes: [String!]): GroupConnection
  resources(first: Int, Last: Int, before: String, after:String, codes: [String!]): ResourceConnection
}

type ResourceConnection{
  edges: [ResourceEdge]
  pageInfo: PageInfo!
}

type ResourceEdge {
  cursor: String!
  node: Resource
}

type Resource implements Node{
  code: ID!
  error: [Error!]
  resourceData: ResourceData
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ResourceData{
  id: ID!
  code: ID!
  apis(first: Int, Last: Int, before: String, after:String, codes: [String!]): APIConnection
  roles(first: Int, Last: Int, before: String, after:String, codes: [String!]): RoleConnection
}

type RoleConnection{
  edges: [RoleEdge]
  pageInfo: PageInfo!
}

type RoleEdge {
  cursor: String!
  node: Role
}

type Role implements Node{
  code: ID!
  error: [Error!]
  roleData: RoleData
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RoleData{
  id: ID!
  code: ID!
  label: String!
  isCreate: Boolean!
  isRead: Boolean!
  isUpdate: Boolean!
  isDelete: Boolean!
  isEnable: Boolean!
  isExecutable: Boolean!
  isEspecial: Boolean!
  especial: String
  resources(first: Int, Last: Int, before: String, after:String, codes: [String!]): ResourceConnection
}



extend type Mutation{
  createMember(member: MemberInput!) : Member!
  createGroup(group: GroupCreate!): Group!
  createApi(api: ApiInput!): API!
  createResource(resource: ResourceInput!): Resource!
  assignMemberGroup(memberGroup: MemberGroup!): Member!
  assignApiGroup(apiGroup: ApiGroup!): API!
  #updateMember(member: MemberInput!) : Member!

  createRole(role: RoleInput!) : Role!
  #updateRole(role: RoleInput!) : Role!
  #deleteRole(role: RoleInput!) : Role!

  refreshToken(apikeys: [String!]!): Token!
  updateToken(memberData: [InputMemberData!]!): Token!
  createToken(memberData: [InputMemberData!]!): Token!
  #deleteToken(apikeys: [String!]!): Token!


  #addMemberRole() : Member!
}

input InputMemberData {
    isuser: Boolean!
    apikey: String!
    json: String!
}

input RoleInput {
    roleInputData: RoleInputData!
}

input RoleInputData {
    code: ID!
    resourceId: ID!
    label : String!
    permission:  String!
}

input MemberGroup{
    groupCode: ID!
    memberCode: ID!
    roleCode:   ID!
}

input ApiGroup {
    groupCode: ID!
    apiCode: ID!
}

type Token {
    code: ID!
    status: String!
    error: [Error!]
}

input TokenFilter {
    memberId: String!
    groupId: String!
    resourceId: [String!]!
}

input GroupCreate{
    GroupCreateData: GroupCreateData!
}

input GroupCreateData{
    code: String!
    type: String!
    info: String
    parent: ID!
}

input MemberRoleAdd{
    id : Int!
    MemberRoleAddData: MemberRoleAddData!
}

input MemberRoleAddData{
    roles: [String!]!
}

input MemberInput{
    memberInputData: MemberInputData!
}

input MemberInputData{
    code: String
    info: String
    type: MemberType!
    groupCode : String!
    roles:  [String!]!
    resource:  String!
}

input ApiInput {
    apiInputData: ApiInputData!
}

input ApiInputData {
    code: ID!
}

input ResourceInput {
    resourceInputData: ResourceInputData!
}

input ResourceInputData {
    code: ID!
    apiID: ID!
}
