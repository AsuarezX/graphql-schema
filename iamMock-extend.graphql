interface Node {
  code: ID!
  error: [Error!]
}

enum GroupType {
  ROOT
  ORGANIZATION
  PROFILE
  GROUP
  TEAM
}

enum MemberType {
  USER
  SERVICE_ACCOUNT
}

extend type Query{
  node(code: ID!): Node
  member (code: ID!): Member
  # groupBranch (code: ID!): Branch
  
  user: Member
  service_account: Member
  
}

type Member implements Node{
  code: ID!
  error: [Error!]
  memberData: MemberData
}

type MemberData{
  id: ID!
  code: ID!
  memberType: MemberType
  roles: RolConnection
  groups: GroupConnection
  
  access: AccessConnection
}

type Group implements Node{
  code: ID!
  error: [Error!]
  groupData: GroupData
}

interface GroupData{
  id: ID!
  code: ID!
  type: GroupType!
  parent: ID!
  members: MemberConnection
  groups: GroupConnection
  apis: APIConnection
  
  access: AccessConnection

}

type GroupConnection{
  edges: [GroupEdge]
  pageInfo: PageInfo!
}

type GroupEdge {
  cursor: String!
  node: Group
}

type MemberConnection{
  edges: [MemberEdge]
  pageInfo: PageInfo!
}

type MemberEdge {
  cursor: String!
  node: Member
}

type APIConnection{
  edges: [APIEdge]
  pageInfo: PageInfo!
}

type APIEdge {
  cursor: String!
  node: API
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type API implements Node{
  code: ID!
  error: [Error!]
  apiData: APIData

}

type APIData{
  id: ID!
  code: ID!
  groups: GroupConnection
  resources: ResourceConnection

}

type ResourceConnection{
  edges: [ResourceEdge]
  pageInfo: PageInfo!
}

type ResourceEdge {
  cursor: String!
  node: Resource
}

type Resource implements Node{
  code: ID!
  error: [Error!]
  resourceData: ResourceData
}

type ResourceData{
  id: ID!
  code: ID!
  api: APIConnection
  roles: RolConnection
}

type RolConnection{
  edges: [RolEdge]
  pageInfo: PageInfo!
}

type RolEdge {
  cursor: String!
  node: Rol
}

type Rol implements Node{
  code: ID!
  error: [Error!]
  rolData: RolData
}

type RolData{
  id: ID!
  code: ID!
  label: String!
  isCreate: Boolean!
  isRead: Boolean!
  isUpdate: Boolean!
  isDelete: Boolean!
  isEnable: Boolean!
  isExecutable: Boolean!
  isEspecial: Boolean!
  especial: String
  resource: ResourceConnection
}

type Organization implements Node{
  code: ID!
  error: [Error!]
  organizationData: OrganizationData  
}

type OrganizationData implements GroupData{
  id: ID!
  code: ID!
  type: GroupType!
  parent: ID!
  members: MemberConnection
  groups: GroupConnection
  apis: APIConnection
  
  products: ProductConnection
  access: AccessConnection
}
type AccessConnection{
  edges: [AccessEdge]
  pageInfo: PageInfo!
}

type AccessEdge {
  cursor: String!
  node: Access
}

type Product implements Node{
  code: ID!
  error: [Error!]
  product: ProductData
}

type ProductData {
  id: ID!
  code: ID!
  apis: APIConnection
  organizations: OrganizationConnection
}

type OrganizationConnection{
  edges: [OrganizationEdge]
  pageInfo: PageInfo!
}

type OrganizationEdge {
  cursor: String!
  node: Organization
}

type ProductConnection{
  edges: [ProductEdge]
  pageInfo: PageInfo!
}

type ProductEdge {
  cursor: String!
  node: Product
}
