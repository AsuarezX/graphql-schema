# project: cj7bhwued1f650194yu8128l7
# version: 14

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID! @isUnique
  name: String!
  secret: String! @isUnique
  size: Int!
  updatedAt: DateTime!
  url: String! @isUnique
}

type User implements Node {
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Query implements Node {
  search: Search! @relation(name: "QuerySearch")
  searchStatusService: String!
  quote: Quote! @relation(name: "QueryOnQuote")
  quoteStatusService: String!
  bookStatusService: String!
  query: Query @relation(name: "QueryQuery")
  query2: Query @relation(name: "QueryQuery")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Mutation implements Node {
  hotelBook: HotelBookPayload @relation(name: "MutationHotelBookPayload")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type AuditData implements Node {
  transactions: [Transactions!]! @relation(name: "AuditDataTransactions")
  timeStamp: String!
  processTime: String!
  hotelQuote: HotelQuote @relation(name: "HotelQuoteAuditData")
  hotelBookPayload: HotelBookPayload @relation(name: "HotelBookPayloadAuditData")
  hotelSearch: HotelSearch @relation(name: "HotelSearchAuditData")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Bed implements Node {
  type: String!
  description: String!
  count: Int
  shared: Boolean
  room: Room @relation(name: "RoomBeds")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type BookDetail implements Node {
  reference: Reference! @relation(name: "BookDetailReference")
  status: Status!
  price: Price! @relation(name: "BookDetailPrice")
  remarks: String
  payable: String
  hotelBookPayload: HotelBookPayload @relation(name: "HotelBookPayloadBookDetail")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum BusinessRulesType {
  CHEAPER_AMOUNT
  ROOM_TYPE
}

type CancelPenalty implements Node {
  hoursBefore: Int!
  penaltyType: CancelPenaltyType!
  currency: String!
  appliedOver: PriceType!
  value: Float!
  cancelPolicy: CancelPolicy @relation(name: "CancelPolicyCancelPenalty")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum CancelPenaltyType {
  NIGHTS
  PERCENT
  IMPORT
}

type CancelPolicy implements Node {
  refundable: Boolean!
  cancelPenalties: [CancelPenalty!]! @relation(name: "CancelPolicyCancelPenalty")
  hotelQuote: HotelQuote @relation(name: "HotelQuoteCancelPolicy")
  option: Option @relation(name: "OptionCancelPolicy")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum ChargeType {
  INCLUDE
  EXCLUDE
}

type CommissionPrice implements Node {
  currency: String!
  value: Float!
  binding: Boolean!
  commissionPercentage: Float
  commissionAmount: Float
  price: Price @relation(name: "PriceCommissionPrice")
  price2: Price @relation(name: "PriceCommissionPrice2")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum DurationType {
  RANGE
  OPEN
}

type Error implements Node {
  code: String!
  type: String!
  description: String!
  hotelBookPayload: HotelBookPayload @relation(name: "HotelBookPayloadError")
  hotelQuote: HotelQuote @relation(name: "HotelQuoteError")
  hotelSearch: HotelSearch @relation(name: "HotelSearchError")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type HotelBookPayload implements Node {
  stats: String
  auditData: [AuditData!]! @relation(name: "HotelBookPayloadAuditData")
  bookDetail: BookDetail! @relation(name: "HotelBookPayloadBookDetail")
  errors: [Error!]! @relation(name: "HotelBookPayloadError")
  warnings: [Warning!]! @relation(name: "HotelBookPayloadWarning")
  mutation: Mutation @relation(name: "MutationHotelBookPayload")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type HotelQuote implements Node {
  stats: String
  auditData: [AuditData!]! @relation(name: "HotelQuoteAuditData")
  optionRefId: String!
  status: Status!
  price: Price! @relation(name: "HotelQuotePrice")
  cancelPolicy: CancelPolicy @relation(name: "HotelQuoteCancelPolicy")
  remarks: String
  surcharges: [Surcharge!]! @relation(name: "HotelQuoteSurcharge")
  cardTypes: [String!]!
  errors: [Error!]! @relation(name: "HotelQuoteError")
  warnings: [Warning!]! @relation(name: "HotelQuoteWarning")
  quote: Quote @relation(name: "QuoteHotelQuote")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type HotelSearch implements Node {
  context: String!
  stats: String
  auditData: [AuditData!]! @relation(name: "HotelSearchAuditData")
  options: [Option!]! @relation(name: "HotelSearchOption")
  errors: [Error!]! @relation(name: "HotelSearchError")
  warnings: [Warning!]! @relation(name: "HotelSearchWarning")
  search: Search @relation(name: "SearchHotelSearch")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type NetPrice implements Node {
  currency: String!
  value: Float!
  binding: Boolean!
  price: Price @relation(name: "PriceNetPrice")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Occupancy implements Node {
  id: ID! @isUnique
  paxes: [Pax!]! @relation(name: "OccupancyPax")
  option: Option @relation(name: "OptionOccupancy")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Option implements Node {
  supplier: String!
  access: String!
  markets: [String!]!
  hotelCode: String!
  hotelName: String
  boardCode: String!
  paymentType: PaymentType!
  status: Status!
  occupancies: [Occupancy!]! @relation(name: "OptionOccupancy")
  rooms: [Room!]! @relation(name: "OptionRoom")
  price: Price! @relation(name: "OptionPrice")
  supplements: [Supplement!]! @relation(name: "OptionSupplement")
  surcharges: [Surcharge!]! @relation(name: "OptionSurcharge")
  rateRules: [RateRules!]!
  cancelPolicy: CancelPolicy @relation(name: "OptionCancelPolicy")
  remarks: String
  id: ID! @isUnique
  hotelSearch: HotelSearch @relation(name: "HotelSearchOption")
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Pax implements Node {
  age: Int!
  occupancy: Occupancy @relation(name: "OccupancyPax")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum PaymentType {
  MERCHANT
  DIRECT
  CARD_BOOKING
  CARD_CHECK_IN
}

type Price implements Node {
  gross: CommissionPrice @relation(name: "PriceCommissionPrice")
  net: NetPrice @relation(name: "PriceNetPrice")
  amount: CommissionPrice @relation(name: "PriceCommissionPrice2")
  bookDetail: BookDetail @relation(name: "BookDetailPrice")
  hotelQuote: HotelQuote @relation(name: "HotelQuotePrice")
  priceBreakdown: PriceBreakdown @relation(name: "PriceBreakdownPrice")
  roomPrice: RoomPrice @relation(name: "RoomPricePrice")
  supplement: Supplement @relation(name: "SupplementPrice")
  surcharge: Surcharge @relation(name: "SurchargePrice")
  option: Option @relation(name: "OptionPrice")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type PriceBreakdown implements Node {
  effectiveDate: String!
  expireDate: String!
  price: Price @relation(name: "PriceBreakdownPrice")
  roomPrice: RoomPrice @relation(name: "RoomPricePriceBreakdown")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum PriceType {
  GROSS
  NET
  AMOUNT
}

type Promotion implements Node {
  code: String!
  name: String!
  effectiveDate: String
  expireDate: String
  room: Room @relation(name: "RoomPromotion")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Quote implements Node {
  hotel: HotelQuote @relation(name: "QuoteHotelQuote")
  query: Query @relation(name: "QueryOnQuote")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type RatePlan implements Node {
  code: String!
  name: String!
  effectiveDate: String
  expireDate: String
  room: Room @relation(name: "RoomRatePlans")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum RateRules {
  PACKAGE
  OLDER55
  OLDER60
  OLDER65
  CANARY_RESIDENT
  BALEARIC_RESIDENT
  LARGE_FAMILY
  HONEYMOON
  PUBLIC_SERVANT
  UNEMPLOYED
}

type Reference implements Node {
  client: String!
  provider: String!
  bookDetail: BookDetail @relation(name: "BookDetailReference")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Resort implements Node {
  code: String!
  name: String
  description: String
  supplement: Supplement @relation(name: "SupplementResort")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Room implements Node {
  occupancyRefId: Int!
  code: String!
  description: String
  refundable: Boolean
  units: Int
  roomPrice: RoomPrice! @relation(name: "RoomPrice")
  beds: [Bed!]! @relation(name: "RoomBeds")
  ratePlans: [RatePlan!]! @relation(name: "RoomRatePlans")
  promotions: [Promotion!]! @relation(name: "RoomPromotion")
  option: Option @relation(name: "OptionRoom")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type RoomPrice implements Node {
  price: Price! @relation(name: "RoomPricePrice")
  breakdown: [PriceBreakdown!]! @relation(name: "RoomPricePriceBreakdown")
  room: Room @relation(name: "RoomPrice")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Search implements Node {
  hotel: HotelSearch @relation(name: "SearchHotelSearch")
  query: Query @relation(name: "QuerySearch")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum ServiceType {
  SKI_PASS
}

enum Status {
  OK
  RQ
}

type Supplement implements Node {
  code: String
  name: String
  description: String
  supplementType: SupplementType!
  chargeType: ChargeType!
  mandatory: Boolean!
  durationType: DurationType
  quantity: Int
  unit: UnitType
  effectiveDate: String
  expireDate: String
  resort: Resort @relation(name: "SupplementResort")
  price: Price @relation(name: "SupplementPrice")
  option: Option @relation(name: "OptionSupplement")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum SupplementType {
  SKI_PASS
  LESSONS
  MEALS
  EQUIPMENT
  TICKET
  TRANSFERS
  GALA
  ACTIVITY
}

type Surcharge implements Node {
  chargeType: ChargeType!
  price: Price @relation(name: "SurchargePrice")
  description: String
  option: Option @relation(name: "OptionSurcharge")
  hotelQuote: HotelQuote @relation(name: "HotelQuoteSurcharge")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

type Transactions implements Node {
  request: String!
  response: String!
  timeStamp: String!
  auditData: AuditData @relation(name: "AuditDataTransactions")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}

enum UnitType {
  DAY
  HOUR
}

type Warning implements Node {
  code: String!
  type: String!
  description: String!
  hotelBookPayload: HotelBookPayload @relation(name: "HotelBookPayloadWarning")
  hotelQuote: HotelQuote @relation(name: "HotelQuoteWarning")
  hotelSearch: HotelSearch @relation(name: "HotelSearchWarning")
  createdAt: DateTime!
  id: ID! @isUnique
  updatedAt: DateTime!
}